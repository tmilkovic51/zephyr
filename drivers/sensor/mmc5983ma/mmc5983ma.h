/*
 * Copyright (c) 2022 Byte Lab d.o.o. <dev@byte-lab.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef ZEPHYR_DRIVERS_SENSOR_MMC5983MA_MMC5983MA_H_
#define ZEPHYR_DRIVERS_SENSOR_MMC5983MA_MMC5983MA_H_

#include <zephyr/device.h>
#include <zephyr/sys/util.h>
#include <zephyr/types.h>
#include <zephyr/drivers/gpio.h>
#include <zephyr/drivers/spi.h>

#define MMC5983MA_I2C_ADDR_BASE			0x30u
#define MMC5983MA_SPI_WRITE_CMD			0x00u	/* ORed with register address */
#define MMC5983MA_SPI_READ_CMD			0x80u	/* ORed with register address */
#define MMC5983MA_CHIP_ID			0x30u

/* Register addresses */
#define MMC5983MA_REG_XOUT0			0x00u
#define MMC5983MA_REG_XOUT1			0x01u
#define MMC5983MA_REG_YOUT0			0x02u
#define MMC5983MA_REG_YOUT1			0x03u
#define MMC5983MA_REG_ZOUT0			0x04u
#define MMC5983MA_REG_ZOUT1			0x05u
#define MMC5983MA_REG_XYZOUT2			0x06u
#define MMC5983MA_REG_TOUT			0x07u
#define MMC5983MA_REG_STATUS			0x08u
#define MMC5983MA_REG_ICTRL0			0x09u
#define MMC5983MA_REG_ICTRL1			0x0Au
#define MMC5983MA_REG_ICTRL2			0x0Bu
#define MMC5983MA_REG_ICTRL3			0x0Cu
#define MMC5983MA_REG_PRODUCT_ID		0x2Fu

/* Register values */
/* REG_XYZOUT2 */
#define MMC5983MA_XYZOUT_X01_MASK		(BIT(7) | BIT(6))
#define MMC5983MA_XYZOUT_X01_SHIFT		6u
#define MMC5983MA_XYZOUT_Y01_MASK		(BIT(5) | BIT(4))
#define MMC5983MA_XYZOUT_Y01_SHIFT		4u
#define MMC5983MA_XYZOUT_Z01_MASK		(BIT(3) | BIT(2))
#define MMC5983MA_XYZOUT_Z01_SHIFT		2u

/* REG_STATUS */
#define MMC5983MA_STATUS_MEAS_M_DONE_MASK	BIT(0)
#define MMC5983MA_STATUS_MEAS_M_DONE_SHIFT	0u
#define MMC5983MA_STATUS_MEAS_T_DONE_MASK	BIT(1)
#define MMC5983MA_STATUS_MEAS_T_DONE_SHIFT	1u
#define MMC5983MA_STATUS_OTP_READ_DONE_MASK	BIT(2)
#define MMC5983MA_STATUS_OTP_READ_DONE_SHIFT	2u

/* REG_ICTRL0 */
#define MMC5983MA_ICTRL0_TM_M_MASK		BIT(0)
#define MMC5983MA_ICTRL0_TM_M_SHIFT		0u
#define MMC5983MA_ICTRL0_TM_T_MASK		BIT(1)
#define MMC5983MA_ICTRL0_TM_T_SHIFT		1u
#define MMC5983MA_ICTRL0_MEAS_INT_EN_MASK	BIT(2)
#define MMC5983MA_ICTRL0_MEAS_INT_EN_SHIFT	2u
#define MMC5983MA_ICTRL0_SET_MASK		BIT(3)
#define MMC5983MA_ICTRL0_SET_SHIFT		3u
#define MMC5983MA_ICTRL0_RESET_MASK		BIT(4)
#define MMC5983MA_ICTRL0_RESET_SHIFT		4u
#define MMC5983MA_ICTRL0_AUTO_SR_EN_MASK	BIT(5)
#define MMC5983MA_ICTRL0_AUTO_SR_EN_SHIFT	5u
#define MMC5983MA_ICTRL0_OTP_READ_MASK		BIT(6)
#define MMC5983MA_ICTRL0_OTP_READ_SHIFT		6u

/* REG_ICTRL1 */
#define MMC5983MA_ICTRL1_BW_MASK		(BIT(0) | BIT(1))
#define MMC5983MA_ICTRL1_BW_SHIFT		0u
#define MMC5983MA_ICTRL1_BW_VAL_100_HZ		0x00u
#define MMC5983MA_ICTRL1_BW_VAL_200_HZ		0x01u
#define MMC5983MA_ICTRL1_BW_VAL_400_HZ		0x02u
#define MMC5983MA_ICTRL1_BW_VAL_800_HZ		0x03u
#define MMC5983MA_ICTRL1_X_INHIBIT_MASK		BIT(2)
#define MMC5983MA_ICTRL1_X_INHIBIT_SHIFT	2u
#define MMC5983MA_ICTRL1_YZ_INHIBIT_MASK	(BIT(3) | BIT(4))
#define MMC5983MA_ICTRL1_YZ_INHIBIT_SHIFT	3u
#define MMC5983MA_ICTRL1_SW_RST_MASK		BIT(7)
#define MMC5983MA_ICTRL1_SW_RST_SHIFT		7u

/* REG_ICTRL2 */
#define MMC5983MA_ICTRL2_CMM_FREQ_MASK		(BIT(0) | BIT(1) | BIT(2))
#define MMC5983MA_ICTRL2_CMM_FREQ_SHIFT		0u
#define MMC5983MA_ICTRL2_CMM_FREQ_VAL_OFF	0x00u
#define MMC5983MA_ICTRL2_CMM_FREQ_VAL_1_HZ	0x01u
#define MMC5983MA_ICTRL2_CMM_FREQ_VAL_10_HZ	0x02u
#define MMC5983MA_ICTRL2_CMM_FREQ_VAL_20_HZ	0x03u
#define MMC5983MA_ICTRL2_CMM_FREQ_VAL_50_HZ	0x04u
#define MMC5983MA_ICTRL2_CMM_FREQ_VAL_100_HZ	0x05u
#define MMC5983MA_ICTRL2_CMM_FREQ_VAL_200_HZ	0x06u
#define MMC5983MA_ICTRL2_CMM_FREQ_VAL_1000_HZ	0x07u
#define MMC5983MA_ICTRL2_CMM_EN_MASK		BIT(3)
#define MMC5983MA_ICTRL2_CMM_EN_SHIFT		3u
#define MMC5983MA_ICTRL2_PRD_SET_MASK		(BIT(4) | BIT(5) | BIT(6))
#define MMC5983MA_ICTRL2_PRD_SET_SHIFT		4u
#define MMC5983MA_ICTRL2_PRD_SET_VAL_1		0x00u
#define MMC5983MA_ICTRL2_PRD_SET_VAL_25		0x01u
#define MMC5983MA_ICTRL2_PRD_SET_VAL_75		0x02u
#define MMC5983MA_ICTRL2_PRD_SET_VAL_100	0x03u
#define MMC5983MA_ICTRL2_PRD_SET_VAL_250	0x04u
#define MMC5983MA_ICTRL2_PRD_SET_VAL_500	0x05u
#define MMC5983MA_ICTRL2_PRD_SET_VAL_1000	0x06u
#define MMC5983MA_ICTRL2_PRD_SET_VAL_2000	0x07u
#define MMC5983MA_ICTRL2_PRD_SET_EN_MASK	BIT(7)
#define MMC5983MA_ICTRL2_PRD_SET_EN_SHIFT	7u

/* REG_ICTRL3 */
#define MMC5983MA_ICTRL3_ST_ENP_MASK		BIT(1)
#define MMC5983MA_ICTRL3_ST_ENP_SHIFT		1u
#define MMC5983MA_ICTRL3_ST_ENM_MASK		BIT(2)
#define MMC5983MA_ICTRL3_ST_ENM_SHIFT		2u
#define MMC5983MA_ICTRL3_SPI_3W_EN_MASK		BIT(7)
#define MMC5983MA_ICTRL3_SPI_3W_EN_SHIFT	7u


/* ODR CONFIGURATION */
#if defined(CONFIG_MMC5983MA_ODR_1_HZ)
#define MMC5983MA_DEFAULT_ODR			MMC5983MA_ICTRL2_CMM_FREQ_VAL_1_HZ
#elif defined(CONFIG_MMC5983MA_ODR_10_HZ)
#define MMC5983MA_DEFAULT_ODR			MMC5983MA_ICTRL2_CMM_FREQ_VAL_10_HZ
#elif defined(CONFIG_MMC5983MA_ODR_20_HZ)
#define MMC5983MA_DEFAULT_ODR			MMC5983MA_ICTRL2_CMM_FREQ_VAL_20_HZ
#elif defined(CONFIG_MMC5983MA_ODR_50_HZ)
#define MMC5983MA_DEFAULT_ODR			MMC5983MA_ICTRL2_CMM_FREQ_VAL_50_HZ
#elif defined(CONFIG_MMC5983MA_ODR_100_HZ)
#define MMC5983MA_DEFAULT_ODR			MMC5983MA_ICTRL2_CMM_FREQ_VAL_100_HZ
#elif defined(CONFIG_MMC5983MA_ODR_200_HZ)
#define MMC5983MA_DEFAULT_ODR			MMC5983MA_ICTRL2_CMM_FREQ_VAL_200_HZ
#elif defined(CONFIG_MMC5983MA_ODR_1000_HZ)
#define MMC5983MA_DEFAULT_ODR			MMC5983MA_ICTRL2_CMM_FREQ_VAL_1000_HZ
#else
#define MMC5983MA_DEFAULT_ODR			MMC5983MA_ICTRL2_CMM_FREQ_VAL_50_HZ
#error "Invalid MMC5983MA output data rate selected"
#endif /* CONFIG_MMC5983MA_ODR_1_HZ */

/* PERIODIC SET CONFIGURATION */
#if defined(CONFIG_MMC5983MA_PRD_SET_EVERY_1_SAMPLE)
#define MMC5983MA_DEFAULT_PRD_SET		MMC5983MA_ICTRL2_PRD_SET_VAL_1
#elif defined(CONFIG_MMC5983MA_PRD_SET_EVERY_25_SAMPLES)
#define MMC5983MA_DEFAULT_PRD_SET		MMC5983MA_ICTRL2_PRD_SET_VAL_25
#elif defined(CONFIG_MMC5983MA_PRD_SET_EVERY_75_SAMPLES)
#define MMC5983MA_DEFAULT_PRD_SET		MMC5983MA_ICTRL2_PRD_SET_VAL_75
#elif defined(CONFIG_MMC5983MA_PRD_SET_EVERY_100_SAMPLES)
#define MMC5983MA_DEFAULT_PRD_SET		MMC5983MA_ICTRL2_PRD_SET_VAL_100
#elif defined(CONFIG_MMC5983MA_PRD_SET_EVERY_250_SAMPLES)
#define MMC5983MA_DEFAULT_PRD_SET		MMC5983MA_ICTRL2_PRD_SET_VAL_250
#elif defined(CONFIG_MMC5983MA_PRD_SET_EVERY_500_SAMPLES)
#define MMC5983MA_DEFAULT_PRD_SET		MMC5983MA_ICTRL2_PRD_SET_VAL_500
#elif defined(CONFIG_MMC5983MA_PRD_SET_EVERY_1000_SAMPLES)
#define MMC5983MA_DEFAULT_PRD_SET		MMC5983MA_ICTRL2_PRD_SET_VAL_1000
#elif defined(CONFIG_MMC5983MA_PRD_SET_EVERY_2000_SAMPLES)
#define MMC5983MA_DEFAULT_PRD_SET		MMC5983MA_ICTRL2_PRD_SET_VAL_2000
#else
#define MMC5983MA_DEFAULT_PRD_SET		MMC5983MA_ICTRL2_PRD_SET_VAL_1000
#error "Invalid MMC5983 SET operation period selected"
#endif /* CONFIG_MMC5983MA_PRD_SET_EVERY_1_SAMPLE */

struct mmc5983ma_config {
	struct spi_dt_spec spi;
	struct gpio_dt_spec int_gpio;
};

struct mmc5983ma_data {
	uint32_t x_sample;
	uint32_t y_sample;
	uint32_t z_sample;
	uint8_t temp_sample;

#ifdef CONFIG_MMC5983MA_TRIGGER
	const struct device *dev;
	struct gpio_callback gpio_cb;

	struct sensor_trigger data_ready_trigger;
	sensor_trigger_handler_t data_ready_handler;

#if defined(CONFIG_MMC5983MA_TRIGGER_OWN_THREAD)
	K_KERNEL_STACK_MEMBER(thread_stack, CONFIG_MMC5983MA_THREAD_STACK_SIZE);
	struct k_sem gpio_sem;
	struct k_thread thread;
#elif defined(CONFIG_MMC5983MA_TRIGGER_GLOBAL_THREAD)
	struct k_work work;
#endif /* CONFIG_MMC5983MA_TRIGGER_OWN_THREAD */

#endif /* CONFIG_MMC5983MA_TRIGGER */
};

#ifdef CONFIG_MMC5983MA_TRIGGER
int mmc5983ma_read_reg(const struct device *dev,
			uint16_t reg_addr, void *data_buf, size_t data_length);
int mmc5983ma_write_reg(const struct device *dev,
			uint16_t reg_addr, void *data_buf, size_t data_length);

int mmc5983ma_trigger_set(const struct device *dev,
			const struct sensor_trigger *trig,
			sensor_trigger_handler_t handler);

int mmc5983ma_sample_fetch(const struct device *dev, enum sensor_channel chan);

int mmc5983ma_init_interrupt(const struct device *dev);
#endif /* CONFIG_MMC5983MA_TRIGGER */

#endif /* ZEPHYR_DRIVERS_SENSOR_MMC5983MA_MMC5983MA_H_ */
